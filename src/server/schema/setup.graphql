type SetupState {
  id: Int!
  isSetupComplete: Boolean!
  currentStep: String!
  storeInitialized: Boolean!
  adminCreated: Boolean!
  setupCompletedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StoreSettings {
  id: Int!
  storeName: String!
  storeDescription: String
  contactEmail: String!
  contactPhone: String
  currency: String!
  timezone: String!
  country: String!
  address: String
  city: String
  state: String
  postalCode: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateStoreSettingsInput {
  storeName: String!
  storeDescription: String
  contactEmail: String!
  contactPhone: String
  currency: String!
  timezone: String!
  country: String!
  address: String
  city: String
  state: String
  postalCode: String
}

input UpdateSetupStateInput {
  currentStep: String
  isSetupComplete: Boolean
  storeInitialized: Boolean
  adminCreated: Boolean
  setupCompletedAt: DateTime
}

input CreateAdminUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

type Query {
  testDatabaseConnection: Boolean!
  getSetupProgress: SetupProgress!
}

type Mutation {
  createStoreSettings(input: CreateStoreSettingsInput!): StoreSettings!
  createAdminUser(input: CreateAdminUserInput!): AdminUser!
  runDatabaseMigrations: Boolean!
  configureSecuritySettings(input: SecuritySettingsInput!): SecuritySettings!
  completeSetup: Boolean!
}

type SetupProgress {
  currentStep: String!
  completedSteps: [String!]!
  storeSettings: StoreSettings
  adminSettings: AdminUser
  databaseSettings: DatabaseSettings
  securitySettings: SecuritySettings
}

input AddressInput {
  street: String!
  city: String!
  state: String!
  postalCode: String!
  country: String!
}

input SecuritySettingsInput {
  sslEnabled: Boolean!
  firewallEnabled: Boolean!
  rateLimitEnabled: Boolean!
  corsOrigins: [String!]!
  authType: String!
  sessionSecret: String
  jwtSecret: String
}

type Address {
  street: String!
  city: String!
  state: String!
  postalCode: String!
  country: String!
}

type AdminUser {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  phoneNumber: String
  twoFactorEnabled: Boolean!
}

type DatabaseSettings {
  host: String!
  port: Int!
  database: String!
  username: String!
  ssl: Boolean!
  connectionStatus: String!
  migrationStatus: String!
}

type SecuritySettings {
  sslEnabled: Boolean!
  firewallEnabled: Boolean!
  rateLimitEnabled: Boolean!
  corsOrigins: [String!]!
  authType: String!
}
