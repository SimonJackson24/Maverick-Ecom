import mongoose, { Schema, Document } from 'mongoose';

export interface IAdminSettings extends Document {
  // Store Settings
  store: {
    name: string;
    description: string;
    logo: string;
    favicon: string;
    currency: string;
    timezone: string;
    languages: string[];
    defaultLanguage: string;
    maintenanceMode: boolean;
  };

  // Advanced SEO Settings
  seo: {
    global: {
      defaultTitle: string;
      titleTemplate: string;
      defaultDescription: string;
      defaultKeywords: string[];
      robotsTxt: string;
      sitemapConfig: {
        autoGenerate: boolean;
        changefreq: 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never';
        priority: number;
        excludePaths: string[];
      };
      canonicalUrl: string;
      socialMedia: {
        facebook: string;
        twitter: string;
        instagram: string;
        pinterest: string;
      };
    };
    schemas: {
      organization: {
        enabled: boolean;
        name: string;
        logo: string;
        contactPoint: {
          telephone: string;
          email: string;
          contactType: string;
        };
      };
      localBusiness: {
        enabled: boolean;
        type: string;
        address: {
          streetAddress: string;
          addressLocality: string;
          addressRegion: string;
          postalCode: string;
          addressCountry: string;
        };
        geo: {
          latitude: number;
          longitude: number;
        };
        openingHours: string[];
      };
    };
    contentOptimization: {
      autoGenerateMetaTags: boolean;
      aiContentSuggestions: boolean;
      keywordDensityTarget: number;
      minContentLength: number;
      readabilityScore: {
        enabled: boolean;
        minScore: number;
      };
      internalLinking: {
        autoSuggest: boolean;
        minLinksPerPage: number;
        maxLinksPerPage: number;
      };
    };
    performance: {
      imageOptimization: {
        enabled: boolean;
        quality: number;
        maxWidth: number;
        generateWebP: boolean;
        lazyLoading: boolean;
      };
      preload: {
        enabled: boolean;
        resources: string[];
      };
      caching: {
        browserCacheTime: number;
        cdnCaching: boolean;
      };
    };
    analytics: {
      googleSearchConsole: {
        verificationToken: string;
        enabled: boolean;
      };
      bingWebmaster: {
        verificationToken: string;
        enabled: boolean;
      };
      customMetrics: {
        trackScrollDepth: boolean;
        trackEngagementTime: boolean;
        trackOutboundLinks: boolean;
        heatMapping: boolean;
      };
    };
    monitoring: {
      rankTracking: {
        enabled: boolean;
        keywords: Array<{
          term: string;
          priority: 'high' | 'medium' | 'low';
          location: string;
        }>;
        competitors: string[];
        alertThreshold: number;
      };
      crawlErrors: {
        monitorFrequency: 'daily' | 'weekly' | 'monthly';
        alertOnError: boolean;
        excludePatterns: string[];
      };
      performanceMonitoring: {
        enabled: boolean;
        metrics: {
          coreWebVitals: boolean;
          lighthouse: boolean;
          serverResponse: boolean;
        };
        alertThresholds: {
          lcp: number; // Largest Contentful Paint
          fid: number; // First Input Delay
          cls: number; // Cumulative Layout Shift
        };
      };
    };
    ecommerce: {
      productSchema: {
        enabled: boolean;
        includePriceValidUntil: boolean;
        includeReviews: boolean;
        includeAggregateRating: boolean;
        includeSKU: boolean;
        includeAvailability: boolean;
      };
      breadcrumbs: {
        enabled: boolean;
        separator: string;
        includeInSchema: boolean;
      };
      categoryOptimization: {
        autoGenerateDescriptions: boolean;
        filterableAttributes: string[];
        canonicalRules: {
          preferParentCategory: boolean;
          handlePagination: boolean;
          handleFilters: boolean;
        };
      };
    };
    advanced: {
      customHeadTags: string[];
      redirects: Array<{
        from: string;
        to: string;
        type: 301 | 302 | 307;
        enabled: boolean;
      }>;
      headers: Record<string, string>;
      securityHeaders: {
        enabled: boolean;
        hstsMaxAge: number;
        includeCsp: boolean;
        includeXfo: boolean;
      };
    };
  };

  // Payment Settings
  payment: {
    methods: Array<{
      name: string;
      provider: string;
      isActive: boolean;
      config: Record<string, any>;
    }>;
    taxRate: number;
    minimumOrderAmount: number;
    currencies: string[];
  };

  // Shipping Settings
  shipping: {
    methods: Array<{
      name: string;
      provider: string;
      isActive: boolean;
      cost: number;
      freeShippingThreshold?: number;
      restrictions?: {
        countries: string[];
        maxWeight: number;
        minOrderValue: number;
      };
    }>;
    defaultProvider: string;
    allowInternational: boolean;
    restrictedCountries: string[];
  };

  // Email Settings
  email: {
    templates: Array<{
      name: string;
      subject: string;
      content: string;
      variables: string[];
    }>;
    senderName: string;
    senderEmail: string;
    bccEmail?: string;
    footerText: string;
  };

  // Security Settings
  security: {
    passwordPolicy: {
      minLength: number;
      requireNumbers: boolean;
      requireSpecialChars: boolean;
      requireUppercase: boolean;
      maxAttempts: number;
    };
    sessionTimeout: number;
    ipWhitelist: string[];
    adminIpRestriction: boolean;
    twoFactorAuth: boolean;
  };

  // Inventory Settings
  inventory: {
    lowStockThreshold: number;
    outOfStockBehavior: string;
    allowBackorders: boolean;
    autoReorderPoint: number;
    stockUpdateEmails: string[];
  };

  // Analytics & Tracking
  analytics: {
    googleAnalyticsId?: string;
    facebookPixelId?: string;
    hotjarId?: string;
    customScripts: string[];
  };

  // Notification Settings
  notifications: {
    slack: {
      webhookUrl?: string;
      events: string[];
    };
    email: {
      recipients: string[];
      events: string[];
    };
    pushNotifications: {
      enabled: boolean;
      vapidKeys?: {
        public: string;
        private: string;
      };
    };
  };

  // Social Media
  socialMedia: Array<{
    platform: string;
    url: string;
    isActive: boolean;
  }>;

  // Cache Settings
  cache: {
    enabled: boolean;
    duration: number;
    excludedRoutes: string[];
  };

  // Custom Fields
  customFields: Array<{
    name: string;
    type: string;
    required: boolean;
    options?: string[];
    validation?: string;
  }>;

  updatedBy: Schema.Types.ObjectId;
  lastUpdated: Date;
}

const AdminSettingsSchema = new Schema({
  store: {
    name: { type: String, required: true },
    description: String,
    logo: String,
    favicon: String,
    currency: String,
    timezone: String,
    languages: [String],
    defaultLanguage: String,
    maintenanceMode: { type: Boolean, default: false }
  },

  seo: {
    global: {
      defaultTitle: String,
      titleTemplate: String,
      defaultDescription: String,
      defaultKeywords: [String],
      robotsTxt: String,
      sitemapConfig: {
        autoGenerate: { type: Boolean, default: true },
        changefreq: { 
          type: String, 
          enum: ['always', 'hourly', 'daily', 'weekly', 'monthly', 'yearly', 'never'],
          default: 'weekly'
        },
        priority: { type: Number, default: 0.5 },
        excludePaths: [String]
      },
      canonicalUrl: String,
      socialMedia: {
        facebook: String,
        twitter: String,
        instagram: String,
        pinterest: String
      }
    },
    schemas: {
      organization: {
        enabled: { type: Boolean, default: true },
        name: String,
        logo: String,
        contactPoint: {
          telephone: String,
          email: String,
          contactType: String
        }
      },
      localBusiness: {
        enabled: { type: Boolean, default: false },
        type: String,
        address: {
          streetAddress: String,
          addressLocality: String,
          addressRegion: String,
          postalCode: String,
          addressCountry: String
        },
        geo: {
          latitude: Number,
          longitude: Number
        },
        openingHours: [String]
      }
    },
    contentOptimization: {
      autoGenerateMetaTags: { type: Boolean, default: true },
      aiContentSuggestions: { type: Boolean, default: true },
      keywordDensityTarget: { type: Number, default: 2 },
      minContentLength: { type: Number, default: 300 },
      readabilityScore: {
        enabled: { type: Boolean, default: true },
        minScore: { type: Number, default: 70 }
      },
      internalLinking: {
        autoSuggest: { type: Boolean, default: true },
        minLinksPerPage: { type: Number, default: 2 },
        maxLinksPerPage: { type: Number, default: 20 }
      }
    },
    performance: {
      imageOptimization: {
        enabled: { type: Boolean, default: true },
        quality: { type: Number, default: 85 },
        maxWidth: { type: Number, default: 1920 },
        generateWebP: { type: Boolean, default: true },
        lazyLoading: { type: Boolean, default: true }
      },
      preload: {
        enabled: { type: Boolean, default: true },
        resources: [String]
      },
      caching: {
        browserCacheTime: { type: Number, default: 86400 },
        cdnCaching: { type: Boolean, default: true }
      }
    },
    analytics: {
      googleSearchConsole: {
        verificationToken: String,
        enabled: { type: Boolean, default: false }
      },
      bingWebmaster: {
        verificationToken: String,
        enabled: { type: Boolean, default: false }
      },
      customMetrics: {
        trackScrollDepth: { type: Boolean, default: true },
        trackEngagementTime: { type: Boolean, default: true },
        trackOutboundLinks: { type: Boolean, default: true },
        heatMapping: { type: Boolean, default: false }
      }
    },
    monitoring: {
      rankTracking: {
        enabled: { type: Boolean, default: true },
        keywords: [{
          term: String,
          priority: { 
            type: String,
            enum: ['high', 'medium', 'low'],
            default: 'medium'
          },
          location: String
        }],
        competitors: [String],
        alertThreshold: { type: Number, default: 5 }
      },
      crawlErrors: {
        monitorFrequency: { 
          type: String,
          enum: ['daily', 'weekly', 'monthly'],
          default: 'weekly'
        },
        alertOnError: { type: Boolean, default: true },
        excludePatterns: [String]
      },
      performanceMonitoring: {
        enabled: { type: Boolean, default: true },
        metrics: {
          coreWebVitals: { type: Boolean, default: true },
          lighthouse: { type: Boolean, default: true },
          serverResponse: { type: Boolean, default: true }
        },
        alertThresholds: {
          lcp: { type: Number, default: 2500 }, // 2.5s
          fid: { type: Number, default: 100 },  // 100ms
          cls: { type: Number, default: 0.1 }   // 0.1
        }
      }
    },
    ecommerce: {
      productSchema: {
        enabled: { type: Boolean, default: true },
        includePriceValidUntil: { type: Boolean, default: true },
        includeReviews: { type: Boolean, default: true },
        includeAggregateRating: { type: Boolean, default: true },
        includeSKU: { type: Boolean, default: true },
        includeAvailability: { type: Boolean, default: true }
      },
      breadcrumbs: {
        enabled: { type: Boolean, default: true },
        separator: { type: String, default: '>' },
        includeInSchema: { type: Boolean, default: true }
      },
      categoryOptimization: {
        autoGenerateDescriptions: { type: Boolean, default: true },
        filterableAttributes: [String],
        canonicalRules: {
          preferParentCategory: { type: Boolean, default: true },
          handlePagination: { type: Boolean, default: true },
          handleFilters: { type: Boolean, default: true }
        }
      }
    },
    advanced: {
      customHeadTags: [String],
      redirects: [{
        from: String,
        to: String,
        type: { type: Number, enum: [301, 302, 307] },
        enabled: { type: Boolean, default: true }
      }],
      headers: { type: Map, of: String },
      securityHeaders: {
        enabled: { type: Boolean, default: true },
        hstsMaxAge: { type: Number, default: 31536000 },
        includeCsp: { type: Boolean, default: true },
        includeXfo: { type: Boolean, default: true }
      }
    }
  },

  payment: {
    methods: [{
      name: { type: String, required: true },
      provider: { type: String, required: true },
      isActive: { type: Boolean, default: true },
      config: { type: Map, of: Schema.Types.Mixed }
    }],
    taxRate: { type: Number, default: 20 }, // 20% VAT
    minimumOrderAmount: { type: Number, default: 0 },
    currencies: [{ type: String }]
  },

  shipping: {
    methods: [{
      name: { type: String, required: true },
      provider: { type: String, required: true },
      isActive: { type: Boolean, default: true },
      cost: { type: Number, required: true },
      freeShippingThreshold: Number,
      restrictions: {
        countries: [String],
        maxWeight: Number,
        minOrderValue: Number
      }
    }],
    defaultProvider: String,
    allowInternational: { type: Boolean, default: false },
    restrictedCountries: [String]
  },

  email: {
    templates: [{
      name: { type: String, required: true },
      subject: { type: String, required: true },
      content: { type: String, required: true },
      variables: [String]
    }],
    senderName: { type: String, required: true },
    senderEmail: { type: String, required: true },
    bccEmail: String,
    footerText: String
  },

  security: {
    passwordPolicy: {
      minLength: { type: Number, default: 8 },
      requireNumbers: { type: Boolean, default: true },
      requireSpecialChars: { type: Boolean, default: true },
      requireUppercase: { type: Boolean, default: true },
      maxAttempts: { type: Number, default: 5 }
    },
    sessionTimeout: { type: Number, default: 3600 }, // 1 hour
    ipWhitelist: [String],
    adminIpRestriction: { type: Boolean, default: false },
    twoFactorAuth: { type: Boolean, default: false }
  },

  inventory: {
    lowStockThreshold: { type: Number, default: 5 },
    outOfStockBehavior: { 
      type: String, 
      enum: ['hide', 'show_disabled', 'allow_backorder'],
      default: 'show_disabled'
    },
    allowBackorders: { type: Boolean, default: false },
    autoReorderPoint: { type: Number, default: 3 },
    stockUpdateEmails: [String]
  },

  analytics: {
    googleAnalyticsId: String,
    facebookPixelId: String,
    hotjarId: String,
    customScripts: [String]
  },

  notifications: {
    slack: {
      webhookUrl: String,
      events: [String]
    },
    email: {
      recipients: [String],
      events: [String]
    },
    pushNotifications: {
      enabled: { type: Boolean, default: false },
      vapidKeys: {
        public: String,
        private: String
      }
    }
  },

  socialMedia: [{
    platform: { type: String, required: true },
    url: { type: String, required: true },
    isActive: { type: Boolean, default: true }
  }],

  cache: {
    enabled: { type: Boolean, default: true },
    duration: { type: Number, default: 3600 }, // 1 hour
    excludedRoutes: [String]
  },

  customFields: [{
    name: { type: String, required: true },
    type: { type: String, required: true },
    required: { type: Boolean, default: false },
    options: [String],
    validation: String
  }],

  updatedBy: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  lastUpdated: { type: Date, default: Date.now }
}, {
  timestamps: true,
  collection: 'adminSettings'
});

// Ensure only one settings document exists
AdminSettingsSchema.index({}, { unique: true });

// Add version control
AdminSettingsSchema.plugin(require('mongoose-version'));

export default mongoose.model<IAdminSettings>('AdminSettings', AdminSettingsSchema);
